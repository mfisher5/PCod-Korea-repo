library(readr)
Fst_Korea_v_Alaska <- read_delim("D:/Pacific cod/DataAnalysis/PCod-Korea-repo/results/verif/Fst_Korea_v_Alaska.txt",
"\t", escape_double = FALSE, trim_ws = TRUE)
View(Fst_Korea_v_Alaska)
ggplot(Fst_Korea_v_Alaska, aes(x=Region,y=Fst)) +
geom_boxplot()
library(ggplot2)
ggplot(Fst_Korea_v_Alaska, aes(x=Region,y=Fst)) +
geom_boxplot()
ggplot(Fst_Korea_v_Alaska, aes(x=Region,y=Fst)) +
geom_point()
library(readr)
FST_by_Distance <- read_delim("D:/Pacific cod/DataAnalysis/PCod-Korea-repo/results/FST_by_Distance.txt",
"\t", escape_double = FALSE, trim_ws = TRUE)
View(FST_by_Distance)
ggplot(Fst_Korea_v_Alaska, aes(x=Region,y=Fst)) +
geom_scatter()
mydata <- read_delim("D:/Pacific cod/DataAnalysis/PCod-Korea-repo/results/FST_by_Distance.txt", "\t", escape_double = FALSE, trim_ws = TRUE)
ggplot(mydata, aes(x=DISTANCE, y=FST)) +
geom_boxplot()
ggplot(mydata, aes(x=DISTANCE, y=FST)) +
geom_point()
ggplot(mydata, aes(x=DISTANCE, y=FST)) +
geom_point(aes(col=GROUP))
gg_color_hue <- function(n) {
hues = seq(15, 375, length = n + 1)
hcl(h = hues, l = 65, c = 100)[1:n]
}
ggcols <- gg_color_hue(2)
ggplot(mydata, aes(x=DISTANCE, y=FST)) +
geom_point(aes(col=GROUP)) +
scale_color_manual(name = "Region", values = c("KOR" = ggcols[1], "US/CAN" = ggcols[2]))
gg_color_hue <- function(n) {
hues = seq(15, 375, length = n + 1)
hcl(h = hues, l = 65, c = 100)[1:n]
}
ggcols <- gg_color_hue(2)
ggplot(subset(mydata, GROUP != "US/CAN-SalishSea", aes(x=DISTANCE, y=FST)) +
geom_point(aes(col=GROUP)) +
scale_color_manual(name = "Region", values = c("KOR" = ggcols[1], "US/CAN" = ggcols[2]))
`ccc)`
ggplot(subset(mydata, GROUP != "US/CAN-SalishSea"), aes(x=DISTANCE, y=FST)) +
geom_point(aes(col=GROUP)) +
scale_color_manual(name = "Region", values = c("KOR" = ggcols[1], "US/CAN" = ggcols[2]))
ggplot(subset(mydata, GROUP != "US/CAN-SalishSea"), aes(x=DISTANCE, y=FST)) +
geom_point(aes(col=GROUP), size = 2) +
scale_color_manual(name = "Region", values = c("KOR" = ggcols[1], "US/CAN" = ggcols[2]))
ggplot(subset(mydata, GROUP != "US/CAN-SalishSea"), aes(x=DISTANCE, y=FST)) +
geom_point(aes(col=GROUP), size = 2) +
ylab("Fst") +
scale_color_manual(name = "Region", values = c("KOR" = ggcols[1], "US/CAN" = ggcols[2])) +
theme(axis.text = element_text(size = 16),
axis.title = element_text(size = 16))
ggplot(subset(mydata, GROUP != "US/CAN-SalishSea"), aes(x=DISTANCE, y=FST)) +
geom_point(aes(col=GROUP), size = 2) +
ylab("Fst") +
xlab("Distance") +
scale_color_manual(name = "Region", values = c("KOR" = ggcols[1], "US/CAN" = ggcols[2])) +
theme(axis.text = element_text(size = 16),
axis.title = element_text(size = 18))
library(adgenet)
install.packages("adegenet")
library(adgenet)
library(adegenet)
install.packages("stringi")
library(adegenet)
install.packages("adegenet")
library(adegenet)
install.packages("httpuv")
install.packages("adegenet", dependencies = TRUE)
library(adegenet)
library(dplyr)
library(readr)
test_df_out <- read_delim("D:/Pacific cod/DataAnalysis/PCod-Compare-repo/analyses/environmental/test_df_out.txt",
"\t", escape_double = FALSE, trim_ws = TRUE)
View(test_df_out)
library(ggplot2)
ggplot(test_df_out, aes(x=lat,y=depth)) +
geom_boxplot() +
facet_wrap()
ggplot(test_df_out, aes(x=125.0,y=depth)) +
geom_boxplot() +
facet_wrap(~lat)
ggplot(test_df_out, aes(x=lat,y=125.0)) +
geom_boxplot()
test_df_out$lat <- as.factor(test_df_out$lat)
ggplot(test_df_out, aes(x=lat,y=125.0)) +
geom_boxplot()
ggplot(test_df_out, aes(x=lat,y='125.0')) +
geom_boxplot()
colnames(test_df_out)
ggplot(test_df_out, aes(x=lat,y="125.0")) +
geom_boxplot()
colnames(test_df_out) <- c("lat", "temp_125", "temp_125.5", "depth")
ggplot(test_df_out, aes(x=lat,y=temp_125)) +
geom_boxplot()
ggplot(test_df_out, aes(x=lat,y=temp_125)) +
geom_scatter(aes(col=depth))
ggplot(test_df_out, aes(x=lat,y=temp_125)) +
geom_point(aes(col=depth))
ggplot(test_df_out, aes(x=lat,y=temp_125)) +
geom_point(aes(col=depth), size = 3)
18*5
55/5
library(readr)
library(ggplot2)
library(dplyr)
# Read in Data ------------------------------------------------------------
setwd("D:/Pacific cod/DataAnalysis/PCod-Korea-repo/analyses/Ne/NeEstimator")
mydata <- read_delim("Ne_Korea_v_Alaska_corrected.txt", "\t", escape_double = FALSE, trim_ws = TRUE)
mydata
mydata <- mutate(mydata, Subpopulation = paste(Site, Year, sep = " "))
## only aggregate level
aggs <- filter(mydata, Site != "South Coast")
## only stock level
stock_list <- c("West Coast", "East Coast", "South Coast", "Salish Sea", "Juan de Fuca", "Wash. Coast", "Hecate Strait", "PWSound", "Kodiak", "Unimak Pass", "Adak")
stocks <- filter(mydata, Site %in% stock_list)
library(scales)
squish_trans <- function(from, to, factor) {
trans <- function(x) {
# get indices for the relevant regions
isq <- x > from & x < to
ito <- x >= to
# apply transformation
x[isq] <- from + (x[isq] - from)/factor
x[ito] <- from + (to - from)/factor + (x[ito] - to)
return(x)
}
inv <- function(x) {
# get indices for the relevant regions
isq <- x > from & x < from + (to - from)/factor
ito <- x >= from + (to - from)/factor
# apply transformation
x[isq] <- from + (x[isq] - from) * factor
x[ito] <- to + (x[ito] - (from + (to - from)/factor))
return(x)
}
# return the transformation
return(trans_new("squished", trans, inv))
}
###########################################################
ggplot(aggs, aes(x=Subpopulation, y=Ne1)) +
geom_point(aes(col = Population), size = 2)+
geom_errorbar(aes(ymin=Ne1_lower, ymax = Ne1_upper, col = Population), size = 1)+
ylab("Ne") +
xlab("Sampling Site") +
scale_y_continuous(trans = squish_trans(25000,30000,1000)) +
scale_x_discrete(limits = aggs$Subpopulation) +
theme(axis.title.x=element_text(size = 18),
#axis.text.x=element_text(angle=90, hjust = 0),
axis.text.x = element_blank(),
axis.title.y=element_text(size=18),
axis.text.y=element_blank())
ggplot(aggs, aes(x=Subpopulation, y=Ne1)) +
geom_point(aes(col = Population), size = 2)+
geom_errorbar(aes(ymin=Ne1_lower, ymax = Ne1_upper, col = Population), size = 1)+
ylab("Ne") +
xlab("Sampling Site") +
#scale_y_continuous(trans = squish_trans(25000,30000,1000)) +
scale_x_discrete(limits = aggs$Subpopulation) +
theme(axis.title.x=element_text(size = 18),
#axis.text.x=element_text(angle=90, hjust = 0),
axis.text.x = element_blank(),
axis.title.y=element_text(size=18),
axis.text.y=element_blank())
ggplot(aggs, aes(x=Subpopulation, y=Ne1)) +
geom_point(aes(col = Population), size = 2)+
geom_errorbar(aes(ymin=Ne1_lower, ymax = Ne1_upper, col = Population), size = 1)+
ylab("Ne") +
xlab("Sampling Site") +
#scale_y_continuous(trans = squish_trans(25000,30000,1000)) +
scale_x_discrete(limits = aggs$Subpopulation) +
theme(axis.title.x=element_text(size = 18),
axis.text.x=element_text(angle=90, hjust = 0),
axis.title.y=element_text(size=18),
axis.text.y=element_text())
setwd("D:/Pacific cod/DataAnalysis/PCod-Korea-repo/analyses/Ne/NeEstimator")
mydata <- read_delim("Ne_Korea_v_Alaska_corrected.txt", "\t", escape_double = FALSE, trim_ws = TRUE)
mydata
mydata <- mutate(mydata, Subpopulation = paste(Site, Year, sep = " "))
## only aggregate level
aggs <- filter(mydata, Site != "South Coast")
## only stock level
stock_list <- c("West Coast", "East Coast", "South Coast", "Salish Sea", "Juan de Fuca", "Wash. Coast", "Hecate Strait", "PWSound", "Kodiak", "Unimak Pass", "Adak")
stocks <- filter(mydata, Site %in% stock_list)
ggplot(aggs, aes(x=Subpopulation, y=Ne1)) +
geom_point(aes(col = Population), size = 2)+
geom_errorbar(aes(ymin=Ne1_lower, ymax = Ne1_upper, col = Population), size = 1)+
ylab("Ne") +
xlab("Sampling Site") +
#scale_y_continuous(trans = squish_trans(25000,30000,1000)) +
scale_x_discrete(limits = aggs$Subpopulation) +
theme(axis.title.x=element_text(size = 18),
axis.text.x=element_text(angle=90, hjust = 0),
axis.title.y=element_text(size=18),
axis.text.y=element_text())
ggplot(aggs, aes(x=Subpopulation, y=Ne1)) +
geom_point(aes(col = Population), size = 2)+
geom_errorbar(aes(ymin=Ne1_lower, ymax = Ne1_upper, col = Population), size = 1)+
ylab("Ne (x 1000)") +
xlab("Sampling Site") +
scale_y_continuous(breaks = seq(0,40000, 10000), labels = c("0", "10", "20", "30", "40")) +
scale_x_discrete(limits = aggs$Subpopulation) +
theme(axis.title.x=element_text(size = 18),
axis.text.x=element_text(angle=90, hjust = 0),
axis.title.y=element_text(size=18),
axis.text.y=element_text())
ggplot(aggs, aes(x=Subpopulation, y=Ne1)) +
geom_point(aes(col = Population), size = 2)+
geom_errorbar(aes(ymin=Ne1_lower, ymax = Ne1_upper, col = Population), size = 1)+
ylab("Ne (x 1000)") +
xlab("Sampling Site") +
scale_y_continuous(breaks = seq(0,40000, 10000), labels = c("0", "10", "20", "30", "40")) +
scale_x_discrete(limits = aggs$Subpopulation) +
theme(axis.title.x=element_text(size = 18),
axis.text.x=element_text(angle=90, hjust = 0, size = 12),
axis.title.y=element_text(size=18),
axis.text.y=element_text())
ggplot(aggs, aes(x=Subpopulation, y=Ne1)) +
geom_point(aes(col = Population), size = 2)+
geom_errorbar(aes(ymin=Ne1_lower, ymax = Ne1_upper, col = Population), size = 1)+
ylab("Ne (x 1000)") +
xlab("Sampling Site") +
scale_y_continuous(breaks = seq(0,40000, 10000), labels = c("0", "10", "20", "30", "40")) +
scale_x_discrete(limits = aggs$Subpopulation) +
theme(axis.title.x=element_text(size = 18),
axis.text.x=element_text(angle=90, hjust = 0, size = 8),
axis.title.y=element_text(size=18),
axis.text.y=element_text())
ggplot(aggs, aes(x=Subpopulation, y=Ne1)) +
geom_point(aes(col = Population), size = 2)+
geom_errorbar(aes(ymin=Ne1_lower, ymax = Ne1_upper, col = Population), size = 1)+
ylab("Ne (x 1000)") +
xlab("Sampling Site") +
scale_y_continuous(breaks = seq(0,40000, 10000), labels = c("0", "10", "20", "30", "40")) +
scale_x_discrete(limits = aggs$Subpopulation) +
theme(axis.title.x=element_text(size = 18),
axis.text.x=element_text(angle=90, hjust = 0, size = 8),
axis.title.y=element_text(size=18),
axis.text.y=element_text(size = 12))
ggplot(aggs, aes(x=Subpopulation, y=Ne1)) +
geom_point(aes(col = Population), size = 2)+
geom_errorbar(aes(ymin=Ne1_lower, ymax = Ne1_upper, col = Population), size = 1)+
ylab("Ne (x 1000)") +
xlab("Sampling Site") +
scale_y_continuous(breaks = seq(0,40000, 10000), labels = c("0", "10", "20", "30", "40")) +
scale_x_discrete(limits = aggs$Subpopulation) +
theme(axis.title.x=element_text(size = 18),
axis.text.x=element_text(angle=90, hjust = 0, size = 8),
axis.title.y=element_text(size=18),
axis.text.y=element_text(size = 14))
# Read in Data ------------------------------------------------------------
setwd("D:/Pacific cod/DataAnalysis/PCod-Korea-repo/analyses/Ne/NeEstimator")
mydata <- read_delim("Ne_Korea_v_Alaska_corrected.txt", "\t", escape_double = FALSE, trim_ws = TRUE)
mydata
mydata <- mutate(mydata, Subpopulation = paste(Site, Year, sep = " "))
## only aggregate level
aggs <- filter(mydata, Site != "South Coast")
## only stock level
stock_list <- c("West Coast", "East Coast", "South Coast", "Salish Sea", "Juan de Fuca", "Wash. Coast", "Hecate Strait", "PWSound", "Kodiak", "Unimak Pass", "Adak")
stocks <- filter(mydata, Site %in% stock_list)
# Plot Data ---------------------------------------------------------------
#################### plotting function to squish axis ####################
library(scales)
squish_trans <- function(from, to, factor) {
trans <- function(x) {
# get indices for the relevant regions
isq <- x > from & x < to
ito <- x >= to
# apply transformation
x[isq] <- from + (x[isq] - from)/factor
x[ito] <- from + (to - from)/factor + (x[ito] - to)
return(x)
}
inv <- function(x) {
# get indices for the relevant regions
isq <- x > from & x < from + (to - from)/factor
ito <- x >= from + (to - from)/factor
# apply transformation
x[isq] <- from + (x[isq] - from) * factor
x[ito] <- to + (x[ito] - (from + (to - from)/factor))
return(x)
}
# return the transformation
return(trans_new("squished", trans, inv))
}
###########################################################
ggplot(aggs, aes(x=Subpopulation, y=Ne1)) +
geom_point(aes(col = Population), size = 2)+
geom_errorbar(aes(ymin=Ne1_lower, ymax = Ne1_upper, col = Population), size = 1)+
ylab("Ne (x 1000)") +
xlab("Sampling Site") +
scale_y_continuous(breaks = seq(0,40000, 10000), labels = c("0", "10", "20", "30", "40")) +
scale_x_discrete(limits = aggs$Subpopulation) +
theme(axis.title.x=element_text(size = 18),
axis.text.x=element_text(angle=90, hjust = 0, size = 8),
axis.title.y=element_text(size=18),
axis.text.y=element_text(size = 14))
library(adegenet)
library(hierfstat)
library (gplots)
setwd("D:/Pacific cod/DataAnalysis/PCod-Korea-repo/analyses/R")
my_data_all <-read.genepop("../../stacks_b8_verif/batch_8_filteredMAF_filteredIndivids30_filteredLoci_filteredHWE_filteredCR.gen")
# To replace missing data information with the mean
X <- scaleGen(my_data_all, NA.method="mean")
# To conduct the PCA. IF YOU KNOW HOW MANY AXES TO RETAIN
pca_all <- dudi.pca(X,cent=FALSE,scale=FALSE,scannf=FALSE,nf=2) #nf = number to retain
barplot(pca_all$eig[1:50],main="PCA eigenvalues", col=heat.colors(50))
summary(pca_all)
col <- c("darkgray","mediumorchid1","aquamarine2","firebrick4","chartreuse","deepskyblue", "deepskyblue4", "coral1", "mediumorchid4")
#Color of legend (order easier to read)
col_leg <- c("firebrick4","coral1","aquamarine2","mediumorchid4", "mediumorchid1","deepskyblue", "deepskyblue4", "gray","chartreuse")
#Point shapes for legend (here is by region)
points_leg <- c(17,17,16,16,16,16, 16, 16,15)
#to graph with lines between samples
s.class(pca_all$li, fac=pop(my_data_all),
col=col, #color of points. will retain lines between points
clabel=0, #remove population labels
cellipse=0, #remove ellipses; to add back in, make >=1
cpoint=1.5,
grid=FALSE, #otherwise will have light gray grid markers
pch=c(16,16,16,17,15,16, 16, 17, 16)[as.numeric(pop(my_data_all))], #change point shapes
axesell=TRUE)
# add legend
legend ("topleft", legend = c("YellowSeaBlock", "Boryeong", "Namhae", "Geoje '14-'15", "Geoje '13-'14", "Jinhae Bay Dec.", "Jinhae Bay Feb.", "Pohang", "Jukbyeon"), col = col_leg, border = FALSE, bty = "n", cex = 0.9, pt.cex=1.5, y.intersp = 1, title = "Sampling Site",pch=points_leg)
# add eigenvalues plot as inset
add.scatter.eig(pca_all$eig[1:50],posi="bottom", 3,2,1,ratio=.2)
## -- Eigenvalues as percentages of the total variation in the data
eig.perc <- 100*pca_all$eig/sum(pca_all$eig)
head(eig.perc)
points_leg <- c(16,17,16,16,16,16, 16, 16,17)
s.class(pca_all$li, fac=pop(my_data_all),
col=col, #color of points. will retain lines between points
clabel=0, #remove population labels
cellipse=0, #remove ellipses; to add back in, make >=1
cpoint=1.5,
grid=FALSE, #otherwise will have light gray grid markers
pch=c(16,16,16,16,16,16, 16, 17, 16)[as.numeric(pop(my_data_all))], #change point shapes
axesell=TRUE)
add.scatter.eig(pca_all$eig[1:50],posi="bottom", 3,2,1,ratio=.2)
s.class(pca_all$li, fac=pop(my_data_all),
col=col, #color of points. will retain lines between points
clabel=0, #remove population labels
cellipse=0, #remove ellipses; to add back in, make >=1
cpoint=1.5,
grid=FALSE, #otherwise will have light gray grid markers
pch=c(16,16,16,16,17,16, 16, 17, 16)[as.numeric(pop(my_data_all))], #change point shapes
axesell=TRUE)
library(readr)
library(ggplot2)
library(dplyr)
# Load Data ---------------------------------------------------------------
setwd("D:/Pacific cod/DataAnalysis/PCod-Korea-repo/metadata")
sample_data <- read_delim("D:/Pacific cod/DataAnalysis/PCod-Korea-repo/metadata/sample_data_wjb.txt", "\t", escape_double = FALSE, trim_ws = TRUE)
sample_list <- read_delim("D:/Pacific cod/DataAnalysis/PCod-Korea-repo/metadata/sample_list_wjb.txt", "\t", escape_double = FALSE, trim_ws = TRUE)
mydata <- right_join(sample_data, sample_list, by="Sample.ID")
dim(mydata)
dim(sample_list)
View(mydata)
data.sex <- mydata %>%
group_by(Site) %>%
count(Sex)
data.sex
ggplot(data.sex, aes(x=Site, y = n, fill = Sex)) +
geom_col()
xmax <-  max(as.numeric(mydata$TL.cm), na.rm = TRUE) + 1
data = subset(mydata, !is.na(BW.g))
data$TL.cm <- as.numeric(data$TL.cm)
data$TL.cm <- as.numeric(data$TL.cm)
View(data)
neworder <- c("YSBlock", "Boryeong", "Geoje", "Namhae", "Jinhae Bay", "Pohang", "Jukbyeon")
data_ordered <- arrange(transform(data,
Site=factor(Site,levels=neworder)),Site)
View(data_ordered)
gsi_data <- data_ordered %>%
filter(!is.na(GSI)) %>%
mutate(maturity = ifelse(Sex == "F", ifelse(TL.cm > 44.02, "Mature", "Immature"), ifelse(TL.cm > 32.66, "Mature", "Immature")))
View(gsi_data)
gsi_data %>%
group_by(Assigned.Pop) %>%
group_by(maturity) %>%
count(Sample.ID)
gsi_data %>%
group_by(Assigned.Pop) %>%
Count(maturity)
gsi_data %>%
group_by(Assigned.Pop) %>%
count(maturity)
