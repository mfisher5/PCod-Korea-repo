points(odata_edge.nmds3$points[odata_combo$SiteYear == "Geoje_2014",],
pch = 19, col = "darkorange", cex = 1.2)
## add legend
legend(x="topright", pch = 19, cex = 1, pt.cex = 1.2,
col = c("#fb8072", "#bebada", "darkorange", "gold2", "#8dd3c7", "#80b1d3", "#b3de69"),
legend = c("YSBlock '16", "Namhae '15", "Geoje '14", "Geoje '15", "JinhaeBay '07e", "JinhaeBay '07l", "Pohang '15"), title = "Sampling Site")
plot(odata_edge.nmds3, xaxt = "n", yaxt = "n", xlab = "", ylab = "", main = "NMDS of Edge with Ward D2 Clustering of Edge\nK=2")
## add ordihull for edge, k = 2
ordihull(odata_edge.nmds3, groups = edge2, col=c("gold2","#8dd3c7"), draw = "polygon", alpha = 80)
## point colors
points(odata_edge.nmds3$points[odata_combo$SiteYear == "Pohang_2015",],
pch = 19, col = "#b3de69", cex = 1.2)
points(odata_edge.nmds3$points[odata_combo$SiteYear == "Geoje_2015",],
pch = 19, col = "gold2", cex = 1.2)
points(odata_edge.nmds3$points[odata_combo$SiteYear == "Namhae_2015",],
pch = 19, col = "#bebada", cex = 1.2)
points(odata_edge.nmds3$points[odata_combo$SiteYear == "YSBlock_2016",],
pch = 19, col = "#fb8072", cex = 1.2)
points(odata_edge.nmds3$points[odata_combo$SiteYear == "JinhaeBay_2007",],
pch = 19, col = "#8dd3c7", cex = 1.2)
points(odata_edge.nmds3$points[odata_combo$SiteYear == "JinhaeBay_2008",],
pch = 19, col = "#80b1d3", cex = 1.2)
points(odata_edge.nmds3$points[odata_combo$SiteYear == "Geoje_2014",],
pch = 19, col = "darkorange", cex = 1.2)
## add legend
legend(x="topright", pch = 19, cex = 1, pt.cex = 1.2,
col = c("#fb8072", "#bebada", "darkorange", "gold2", "#8dd3c7", "#80b1d3", "#b3de69"),
legend = c("YSBlock '16", "Namhae '15", "Geoje '14", "Geoje '15", "JinhaeBay '07e", "JinhaeBay '07l", "Pohang '15"), title = "Sampling Site")
plot(odata_edge.nmds3, xaxt = "n", yaxt = "n", xlab = "", ylab = "", main = "NMDS of Edge with Ward D2 Clustering of Edge\nK=2")
ordihull(odata_edge.nmds3, groups = edge3, col=c("#b3de69","gold2","#8dd3c7"), draw = "polygon", alpha = 80)
## point colors
points(odata_edge.nmds3$points[odata_combo$SiteYear == "Pohang_2015",],
pch = 19, col = "#b3de69", cex = 1.2)
points(odata_edge.nmds3$points[odata_combo$SiteYear == "Geoje_2015",],
pch = 19, col = "gold2", cex = 1.2)
points(odata_edge.nmds3$points[odata_combo$SiteYear == "Namhae_2015",],
pch = 19, col = "#bebada", cex = 1.2)
points(odata_edge.nmds3$points[odata_combo$SiteYear == "YSBlock_2016",],
pch = 19, col = "#fb8072", cex = 1.2)
points(odata_edge.nmds3$points[odata_combo$SiteYear == "JinhaeBay_2007",],
pch = 19, col = "#8dd3c7", cex = 1.2)
points(odata_edge.nmds3$points[odata_combo$SiteYear == "JinhaeBay_2008",],
pch = 19, col = "#80b1d3", cex = 1.2)
points(odata_edge.nmds3$points[odata_combo$SiteYear == "Geoje_2014",],
pch = 19, col = "darkorange", cex = 1.2)
## add legend
legend(x="topright", pch = 19, cex = 1, pt.cex = 1.2,
col = c("#fb8072", "#bebada", "darkorange", "gold2", "#8dd3c7", "#80b1d3", "#b3de69"),
legend = c("YSBlock '16", "Namhae '15", "Geoje '14", "Geoje '15", "JinhaeBay '07e", "JinhaeBay '07l", "Pohang '15"), title = "Sampling Site")
## run Mantel test
odata_mantel <- mantel(xdis = edge.mrel_dist, ydis = core.mrel_dist,
method = "pearson", permutations = 99999)
odata_mantel
unique(odata_combo$SiteYear)
ks <- c(1,2,3,4,5,6,7)
## run nmds for k = 1 through 7 and save stress values
stresses <- c()
for(k in ks){
odata_core.nmds <- metaMDS(comm = core.mrel_dist, autotransform = FALSE,
distance = "euc", engine = "monoMDS", k = k, weakties = TRUE,
model = "global", maxit = 400, try = 40, trymax = 200,
wascores = TRUE)
stresses[k] <- odata_core.nmds$stress
}
plot(ks,stresses, xlab="K", ylab="stress", main="Value of K v. Stress of NMDS, Core")
stresses
wascores = TRUE)
odata_core.nmds3 <- metaMDS(comm = core.mrel_dist, autotransform = FALSE,
distance = "euc", engine = "monoMDS", k = 3, weakties = TRUE,
model = "global", maxit = 400, try = 40, trymax = 200,
wascores = TRUE)
stressplot(object=odata_core.nmds3, lwd=2)
plot(odata_core.nmds3, xaxt = "n", yaxt = "n", xlab = "", ylab = "", main = "NMDS\nMicrochemistry from Otolith Core")
## set colors for points based on sampling site
points(odata_core.nmds3$points[odata_combo$SiteYear == "Pohang_2015",],
pch = 19, col = "#b3de69", cex = 1.2)
points(odata_core.nmds3$points[odata_combo$SiteYear == "Geoje_2015",],
pch = 19, col = "gold2", cex = 1.2)
points(odata_core.nmds3$points[odata_combo$SiteYear == "Namhae_2015",],
pch = 19, col = "#bebada", cex = 1.2)
points(odata_core.nmds3$points[odata_combo$SiteYear == "YSBlock_2016",],
pch = 19, col = "#fb8072", cex = 1.2)
points(odata_core.nmds3$points[odata_combo$SiteYear == "JinhaeBay_2007",],
pch = 19, col = "#8dd3c7", cex = 1.2)
points(odata_core.nmds3$points[odata_combo$SiteYear == "JinhaeBay_2008",],
pch = 19, col = "#80b1d3", cex = 1.2)
points(odata_core.nmds3$points[odata_combo$SiteYear == "Geoje_2014",],
pch = 19, col = "darkorange", cex = 1.2)
## add legend
legend(x="bottomleft", pch = 19, bty="n", cex = 1, pt.cex = 1.2,
col = c("#fb8072", "#bebada", "darkorange", "gold2", "#8dd3c7", "#80b1d3", "#b3de69"),
legend = c("YSBlock '16", "Namhae '15", "Geoje '14", "Geoje '15", "JinhaeBay '07e", "JinhaeBay '07l", "Pohang '15"), title = "Sampling Site")
# Add ellipses etc. -------------------------------------------------------
ordiellipse(odata_core.nmds2, odata_combo$SiteYear, col=c("darkorange", "gold2", "#8dd3c7", "#80b1d3", "#bebada", "#b3de69", "#fb8072"), kind = "sd", lty = 2, lwd = 1.5)
# Add Element Vectors -----------------------------------------------------
## fit elements to nmds
elements.fit <- envfit(odata_core.nmds2 ~ B11.e + Ba138.e + Li7.e + Mg24.e + Mn55.e + Pb208.e + Sr88.e + Zn66.e, data = odata_combo)
## plot element vectors
plot(elements.fit, col = "black")
plot(odata_core.nmds3, xaxt = "n", yaxt = "n", xlab = "", ylab = "", main = "NMDS\nMicrochemistry from Otolith Core")
## set colors for points based on sampling site
points(odata_core.nmds3$points[odata_combo$SiteYear == "Pohang_2015",],
pch = 19, col = "#b3de69", cex = 1.2)
points(odata_core.nmds3$points[odata_combo$SiteYear == "Geoje_2015",],
pch = 19, col = "gold2", cex = 1.2)
points(odata_core.nmds3$points[odata_combo$SiteYear == "Namhae_2015",],
pch = 19, col = "#bebada", cex = 1.2)
points(odata_core.nmds3$points[odata_combo$SiteYear == "YSBlock_2016",],
pch = 19, col = "#fb8072", cex = 1.2)
points(odata_core.nmds3$points[odata_combo$SiteYear == "JinhaeBay_2007",],
pch = 19, col = "#8dd3c7", cex = 1.2)
points(odata_core.nmds3$points[odata_combo$SiteYear == "JinhaeBay_2008",],
pch = 19, col = "#80b1d3", cex = 1.2)
points(odata_core.nmds3$points[odata_combo$SiteYear == "Geoje_2014",],
pch = 19, col = "darkorange", cex = 1.2)
## add legend
legend(x="bottomleft", pch = 19, bty="n", cex = 1, pt.cex = 1.2,
col = c("#fb8072", "#bebada", "darkorange", "gold2", "#8dd3c7", "#80b1d3", "#b3de69"),
legend = c("YSBlock '16", "Namhae '15", "Geoje '14", "Geoje '15", "JinhaeBay '07e", "JinhaeBay '07l", "Pohang '15"), title = "Sampling Site")
# Add ellipses etc. -------------------------------------------------------
ordiellipse(odata_core.nmds2, odata_combo$SiteYear, col=c("darkorange", "gold2", "#8dd3c7", "#80b1d3", "#bebada", "#b3de69", "#fb8072"), kind = "sd", lty = 2, lwd = 1.5)
# Add Element Vectors -----------------------------------------------------
## fit elements to nmds
elements.fit <- envfit(odata_core.nmds2 ~ B11.e + Ba138.e + Li7.e + Mg24.e + Mn55.e + Pb208.e + Sr88.e + Zn66.e, data = odata_combo)
## plot element vectors
plot(elements.fit, col = "black")
plot(odata_core.nmds3, xaxt = "n", yaxt = "n", xlab = "", ylab = "", main = "NMDS\nMicrochemistry from Otolith Core")
## set colors for points based on sampling site
points(odata_core.nmds3$points[odata_combo$SiteYear == "Pohang_2015",],
pch = 19, col = "#b3de69", cex = 1.2)
points(odata_core.nmds3$points[odata_combo$SiteYear == "Geoje_2015",],
pch = 19, col = "gold2", cex = 1.2)
points(odata_core.nmds3$points[odata_combo$SiteYear == "Namhae_2015",],
pch = 19, col = "#bebada", cex = 1.2)
points(odata_core.nmds3$points[odata_combo$SiteYear == "YSBlock_2016",],
pch = 19, col = "#fb8072", cex = 1.2)
points(odata_core.nmds3$points[odata_combo$SiteYear == "JinhaeBay_2007",],
pch = 19, col = "#8dd3c7", cex = 1.2)
points(odata_core.nmds3$points[odata_combo$SiteYear == "JinhaeBay_2008",],
pch = 19, col = "#80b1d3", cex = 1.2)
points(odata_core.nmds3$points[odata_combo$SiteYear == "Geoje_2014",],
pch = 19, col = "darkorange", cex = 1.2)
## add legend
legend(x="topleft", pch = 19, bty="n", cex = 1, pt.cex = 1.2,
col = c("#fb8072", "#bebada", "darkorange", "gold2", "#8dd3c7", "#80b1d3", "#b3de69"),
legend = c("YSBlock '16", "Namhae '15", "Geoje '14", "Geoje '15", "JinhaeBay '07e", "JinhaeBay '07l", "Pohang '15"), title = "Sampling Site")
# Add ellipses etc. -------------------------------------------------------
ordiellipse(odata_core.nmds2, odata_combo$SiteYear, col=c("darkorange", "gold2", "#8dd3c7", "#80b1d3", "#bebada", "#b3de69", "#fb8072"), kind = "sd", lty = 2, lwd = 1.5)
# Add Element Vectors -----------------------------------------------------
## fit elements to nmds
elements.fit <- envfit(odata_core.nmds2 ~ B11.e + Ba138.e + Li7.e + Mg24.e + Mn55.e + Pb208.e + Sr88.e + Zn66.e, data = odata_combo)
## plot element vectors
plot(elements.fit, col = "black")
plot(odata_core.nmds3, xaxt = "n", yaxt = "n", xlab = "", ylab = "", main = "NMDS\nMicrochemistry from Otolith Core")
## set colors for points based on sampling site
points(odata_core.nmds3$points[odata_combo$SiteYear == "Pohang_2015",],
pch = 19, col = "#b3de69", cex = 1.2)
points(odata_core.nmds3$points[odata_combo$SiteYear == "Geoje_2015",],
pch = 19, col = "gold2", cex = 1.2)
points(odata_core.nmds3$points[odata_combo$SiteYear == "Namhae_2015",],
pch = 19, col = "#bebada", cex = 1.2)
points(odata_core.nmds3$points[odata_combo$SiteYear == "YSBlock_2016",],
pch = 19, col = "#fb8072", cex = 1.2)
points(odata_core.nmds3$points[odata_combo$SiteYear == "JinhaeBay_2007",],
pch = 19, col = "#8dd3c7", cex = 1.2)
points(odata_core.nmds3$points[odata_combo$SiteYear == "JinhaeBay_2008",],
pch = 19, col = "#80b1d3", cex = 1.2)
points(odata_core.nmds3$points[odata_combo$SiteYear == "Geoje_2014",],
pch = 19, col = "darkorange", cex = 1.2)
## add legend
legend(x="topleft", pch = 19, cex = 1, pt.cex = 1.2,
col = c("#fb8072", "#bebada", "darkorange", "gold2", "#8dd3c7", "#80b1d3", "#b3de69"),
legend = c("YSBlock '16", "Namhae '15", "Geoje '14", "Geoje '15", "JinhaeBay '07e", "JinhaeBay '07l", "Pohang '15"), title = "Sampling Site")
# Add ellipses etc. -------------------------------------------------------
ordiellipse(odata_core.nmds2, odata_combo$SiteYear, col=c("darkorange", "gold2", "#8dd3c7", "#80b1d3", "#bebada", "#b3de69", "#fb8072"), kind = "sd", lty = 2, lwd = 1.5)
# Add Element Vectors -----------------------------------------------------
## fit elements to nmds
elements.fit <- envfit(odata_core.nmds2 ~ B11.e + Ba138.e + Li7.e + Mg24.e + Mn55.e + Pb208.e + Sr88.e + Zn66.e, data = odata_combo)
## plot element vectors
plot(elements.fit, col = "black")
## plot heatmap
library(gplots)
some_col_func <- function(n) rev(colorspace::heat_hcl(n, c = c(80, 30), l = c(30, 90), power = c(1/5, 1.5)))
gplots::heatmap.2(as.matrix(gendata),
main = "Clustering from\nOtolith Edge Microchemstry\nv. Genetic Analysis",
srtCol = 20,
dendrogram = "row",
Rowv = dend_edge,
Colv = "NA", # this to make sure the columns are not ordered
trace="none",
margins =c(5,0.1),
key.xlab = "Genetic Assignment",
denscol = "grey",
density.info = "density",
RowSideColors = colors, # to add nice colored strips
col = some_col_func
)
labs <- as.character(odata_combo$SiteYear)[order.dendrogram(dend_edge)]
colors <- c()
for(i in labs){
if(i == "Pohang_2015"){
colors <-c(colors, "#b3de69")
} else if(i == "Geoje_2015"){
colors <-c(colors, "gold2")
} else if(i == "Namhae_2015"){
colors <-c(colors, "#bebada")
} else if(i == "YSBlock_2016"){
colors <-c(colors, "#fb8072")
} else if(i == "JinhaeBay_2007"){
colors <-c(colors, "#8dd3c7")
} else if(i == "JinhaeBay_2008"){
colors <-c(colors, "#80b1d3")
} else if(i == "Geoje_2014"){
colors <-c(colors, "darkorange")
}
}
# plot dendrogram, color coded and labeled
dend_edge <- as.dendrogram(edge.hclust)
plot(dend_edge)
labels_colors(dend_edge) <- colors
labels(dend_edge) <- labs
dend_edge <- set(dend_edge, "labels_cex", 0.5)
dend_edge <- hang.dendrogram(dend_edge,hang_height=0.1)
par(mar = c(3,3,3,7))
siteyears = unique(odata_combo$SiteYear)
plot(dend_edge,
main = "Clustered Edge Microchemistry by Site",
horiz =  TRUE,  nodePar = list(cex = .007))
legend("topleft", legend = c("YSBlock '16", "Namhae '15", "Geoje '14", "Geoje '15", "JinhaeBay '07e", "JinhaeBay '07l", "Pohang '15"), fill = c("#fb8072", "#bebada", "darkorange", "gold2", "#8dd3c7", "#80b1d3", "#b3de69"))
## plot heatmap
library(gplots)
some_col_func <- function(n) rev(colorspace::heat_hcl(n, c = c(80, 30), l = c(30, 90), power = c(1/5, 1.5)))
gplots::heatmap.2(as.matrix(gendata),
main = "Clustering from\nOtolith Edge Microchemstry\nv. Genetic Analysis",
srtCol = 20,
dendrogram = "row",
Rowv = dend_edge,
Colv = "NA", # this to make sure the columns are not ordered
trace="none",
margins =c(5,0.1),
key.xlab = "Genetic Assignment",
denscol = "grey",
density.info = "density",
RowSideColors = colors, # to add nice colored strips
col = some_col_func
)
gplots::heatmap.2(as.matrix(gendata),
main = "Clustering from\nOtolith Edge Microchemstry\nv. Genetic Analysis",
srtCol = 20,
dendrogram = "row",
Rowv = dend_edge,
Colv = "NA", # this to make sure the columns are not ordered
trace="none",
margins =c(5,0.1),
key.xlab = "Genetic Assignment",
denscol = "grey",
density.info = "density",
RowSideColors = colors, # to add nice colored strips
SideCols = colors,
col = some_col_func
)
View(odata_combo)
install.packages("tidyverse")
install.packages("maps")
install.packages("maptools")
install.packages("ggrepel")
install.packages("viridis")
install.packages("ggplot2")
install.packages("pals")
install.packages("grid")
library(tidyverse)
library(maps)
library(maptools)
library(ggrepel)
library(viridis)
library(ggplot2)
library(pals)
library(grid)
install.packages("ggrepel")
install.packages("ggplot2")
install.packages("viridis")
install.packages("ggrepel")
install.packages("ggplot2")
install.packages("viridis")
install.packages("tidyverse")
install.packages("maps")
install.packages("maptools")
install.packages("ggrepel")
install.packages("viridis")
install.packages("ggplot2")
install.packages("pals")
install.packages("grid")
library(tidyverse)
library(maps)
library(maptools)
library(ggrepel)
library(viridis)
library(ggplot2)
library(pals)
library(grid)
install.packages("dplyr")
library(dplyr)
location_data <- select(odata_combo, Sampling.Site, Approx.Lat, Approx.Long)
head(location_data)
location_data <- odata_combo %>%
select(Sampling.Site, Approx.Lat, Approx.Long) %>%
distinct(Sampling.Site, Approx.Lat, Approx.Long)
location_data
# THESE ARE THE FUNCTIONS YOU NEED TO MAKE THE SCALE BAR
#The code in the chunk below was written by Ewen Gallic (bless his heart for being so sharing).
# Result #
#--------#
# Return a list whose elements are :
# 	- rectangle : a data.frame containing the coordinates to draw the first rectangle ;
# 	- rectangle2 : a data.frame containing the coordinates to draw the second rectangle ;
# 	- legend : a data.frame containing the coordinates of the legend texts, and the texts as well.
#
# Arguments : #
#-------------#
# lon, lat : longitude and latitude of the bottom left point of the first rectangle to draw ;
# distance_lon : length of each rectangle ;
# distance_lat : width of each rectangle ;
# distance_legend : distance between rectangles and legend texts ;
# dist_units : units of distance "km" (kilometers) (default), "nm" (nautical miles), "mi" (statute miles).
create_scale_bar <- function(lon,lat,distance_lon,distance_lat,distance_legend, dist_units = "km"){
# First rectangle
bottom_right <- gcDestination(lon = lon, lat = lat, bearing = 90, dist = distance_lon, dist.units = dist_units, model = "WGS84")
topLeft <- gcDestination(lon = lon, lat = lat, bearing = 0, dist = distance_lat, dist.units = dist_units, model = "WGS84")
rectangle <- cbind(lon=c(lon, lon, bottom_right[1,"long"], bottom_right[1,"long"], lon),
lat = c(lat, topLeft[1,"lat"], topLeft[1,"lat"],lat, lat))
rectangle <- data.frame(rectangle, stringsAsFactors = FALSE)
# Second rectangle t right of the first rectangle
bottom_right2 <- gcDestination(lon = lon, lat = lat, bearing = 90, dist = distance_lon*2, dist.units = dist_units, model = "WGS84")
rectangle2 <- cbind(lon = c(bottom_right[1,"long"], bottom_right[1,"long"], bottom_right2[1,"long"], bottom_right2[1,"long"], bottom_right[1,"long"]),
lat=c(lat, topLeft[1,"lat"], topLeft[1,"lat"], lat, lat))
rectangle2 <- data.frame(rectangle2, stringsAsFactors = FALSE)
# Now let's deal with the text
on_top <- gcDestination(lon = lon, lat = lat, bearing = 0, dist = distance_legend, dist.units = dist_units, model = "WGS84")
on_top2 <- on_top3 <- on_top
on_top2[1,"long"] <- bottom_right[1,"long"]
on_top3[1,"long"] <- bottom_right2[1,"long"]
legend <- rbind(on_top, on_top2, on_top3)
legend <- data.frame(cbind(legend, text = c(0, distance_lon, distance_lon*2)), stringsAsFactors = FALSE, row.names = NULL)
return(list(rectangle = rectangle, rectangle2 = rectangle2, legend = legend))
}
#We also need a function to obtain the coordinates of the North arrow:
#
# Result #
#--------#
# Result #
#--------#
# Returns a list containing :
#	- res : coordinates to draw an arrow ;
#	- coordinates of the middle of the arrow (where the "N" will be plotted).
#
# Arguments : #
#-------------#
# scale_bar : result of create_scale_bar() ;
# length : desired length of the arrow ;
# distance : distance between legend rectangles and the bottom of the arrow ;
# dist_units : units of distance "km" (kilometers) (default), "nm" (nautical miles), "mi" (statute miles).
create_orientation_arrow <- function(scale_bar, length, distance = 1, dist_units = "km"){
lon <- scale_bar$rectangle2[1,1]
lat <- scale_bar$rectangle2[1,2]
# Bottom point of the arrow
beg_point <- gcDestination(lon = lon, lat = lat, bearing = 0, dist = distance, dist.units = dist_units, model = "WGS84")
lon <- beg_point[1,"long"]
lat <- beg_point[1,"lat"]
# Let us create the endpoint
on_top <- gcDestination(lon = lon, lat = lat, bearing = 0, dist = length, dist.units = dist_units, model = "WGS84")
left_arrow <- gcDestination(lon = on_top[1,"long"], lat = on_top[1,"lat"], bearing = 225, dist = length/5, dist.units = dist_units, model = "WGS84")
right_arrow <- gcDestination(lon = on_top[1,"long"], lat = on_top[1,"lat"], bearing = 135, dist = length/5, dist.units = dist_units, model = "WGS84")
res <- rbind(
cbind(x = lon, y = lat, xend = on_top[1,"long"], yend = on_top[1,"lat"]),
cbind(x = left_arrow[1,"long"], y = left_arrow[1,"lat"], xend = on_top[1,"long"], yend = on_top[1,"lat"]),
cbind(x = right_arrow[1,"long"], y = right_arrow[1,"lat"], xend = on_top[1,"long"], yend = on_top[1,"lat"]))
res <- as.data.frame(res, stringsAsFactors = FALSE)
# Coordinates from which "N" will be plotted
coords_n <- cbind(x = lon, y = (lat + on_top[1,"lat"])/2)
return(list(res = res, coords_n = coords_n))
}
#The last function enables the user to draw the elements:
#
# Result #
#--------#
# This function enables to draw a scale bar on a ggplot object, and optionally an orientation arrow #
# Arguments : #
#-------------#
# lon, lat : longitude and latitude of the bottom left point of the first rectangle to draw ;
# distance_lon : length of each rectangle ;
# distance_lat : width of each rectangle ;
# distance_legend : distance between rectangles and legend texts ;
# dist_units : units of distance "km" (kilometers) (by default), "nm" (nautical miles), "mi" (statute miles) ;
# rec_fill, rec2_fill : filling colour of the rectangles (default to white, and black, resp.);
# rec_colour, rec2_colour : colour of the rectangles (default to black for both);
# legend_colour : legend colour (default to black);
# legend_size : legend size (default to 3);
# orientation : (boolean) if TRUE (default), adds an orientation arrow to the plot ;
# arrow_length : length of the arrow (default to 500 km) ;
# arrow_distance : distance between the scale bar and the bottom of the arrow (default to 300 km) ;
# arrow_north_size : size of the "N" letter (default to 6).
scale_bar <- function(lon, lat, distance_lon, distance_lat, distance_legend, dist_unit = "km", rec_fill = "white", rec_colour = "black", rec2_fill = "black", rec2_colour = "black", legend_colour = "black", legend_size = 3, orientation = TRUE, arrow_length = 500, arrow_distance = 300, arrow_north_size = 6){
the_scale_bar <- create_scale_bar(lon = lon, lat = lat, distance_lon = distance_lon, distance_lat = distance_lat, distance_legend = distance_legend, dist_unit = dist_unit)
# First rectangle
rectangle1 <- geom_polygon(data = the_scale_bar$rectangle, aes(x = lon, y = lat), fill = rec_fill, colour = rec_colour)
# Second rectangle
rectangle2 <- geom_polygon(data = the_scale_bar$rectangle2, aes(x = lon, y = lat), fill = rec2_fill, colour = rec2_colour)
# Legend
scale_bar_legend <- annotate("text", label = paste(the_scale_bar$legend[,"text"], dist_unit, sep=""), x = the_scale_bar$legend[,"long"], y = the_scale_bar$legend[,"lat"], size = legend_size, colour = legend_colour)
res <- list(rectangle1, rectangle2, scale_bar_legend)
if(orientation){# Add an arrow pointing North
coords_arrow <- create_orientation_arrow(scale_bar = the_scale_bar, length = arrow_length, distance = arrow_distance, dist_unit = dist_unit)
arrow <- list(geom_segment(data = coords_arrow$res, aes(x = x, y = y, xend = xend, yend = yend)), annotate("text", label = "N", x = coords_arrow$coords_n[1,"x"], y = coords_arrow$coords_n[1,"y"], size = arrow_north_size, colour = "black"))
res <- c(res, arrow)
}
return(res)
}
source("scripts/mapping_functions.r")
SK <- map_data("world") %>%
filter(region=="Korea")
# set the breaks for your color ramp
mybreaks=c(0, 30, 60, 90, 120, 150, 180)
colnames(location_data) <- c("group", "lat", "long")
# Make the first map
ggplot() +
geom_polygon(data = SK, aes(x=long, y = lat, group = group), fill=" grey37", alpha=0.3) +
geom_point(data=my_data, aes(x=longitude, y=latitude, color= days), size = 5, alpha = 0.7) +
theme(panel.background = element_rect(fill = "aliceblue"),
panel.grid.major = element_line(colour = NA)) +
scale_color_viridis(option="plasma",
name="Date of sampling\n(Julian day)\n",
breaks = mybreaks) +
coord_map(xlim= c(-119, -139),  ylim = c(46,60)) +
labs(x = "Longitude", y = "Latitude") +
geom_text_repel( data= my_data, aes(x=longitude, y=latitude, label=code), size=4) +
scale_bar(lon = -136, lat = 47.3,
distance_lon = 100, distance_lat = 15, distance_legend = 40,
dist_unit = "km", orientation = FALSE)
colnames(location_data) <- c("site", "latitude", "longitude")
ggplot() +
geom_polygon(data = SK, aes(x=long, y = lat, group = group), fill=" grey37", alpha=0.3) +
geom_point(data=location_data, aes(x=longitude, y=latitude, color= site), size = 5, alpha = 0.7) +
theme(panel.background = element_rect(fill = "aliceblue"),
panel.grid.major = element_line(colour = NA)) +
scale_color_viridis(option="plasma",
name="Date of sampling\n(Julian day)\n",
breaks = mybreaks) +
coord_map(xlim= c(-119, -139),  ylim = c(46,60)) +
labs(x = "Longitude", y = "Latitude") +
geom_text_repel( data= my_data, aes(x=longitude, y=latitude, label=code), size=4) +
scale_bar(lon = -136, lat = 47.3,
distance_lon = 100, distance_lat = 15, distance_legend = 40,
dist_unit = "km", orientation = FALSE)
ggplot() +
geom_polygon(data = SK, aes(x=long, y = lat, group = group), fill=" grey37", alpha=0.3) +
geom_point(data=location_data, aes(x=longitude, y=latitude, color= site), size = 5, alpha = 0.7) +
theme(panel.background = element_rect(fill = "aliceblue"),
panel.grid.major = element_line(colour = NA)) +
scale_color_viridis(option="plasma",
name="Date of sampling\n(Julian day)\n",
breaks = mybreaks) +
coord_map(xlim= c(-119, -139),  ylim = c(46,60)) +
labs(x = "Longitude", y = "Latitude") +
geom_text_repel( data= location_data, aes(x=longitude, y=latitude, label=site), size=4) +
scale_bar(lon = -136, lat = 47.3,
distance_lon = 100, distance_lat = 15, distance_legend = 40,
dist_unit = "km", orientation = FALSE)
ggplot() +
geom_polygon(data = SK, aes(x=long, y = lat, group = group), fill=" grey37", alpha=0.3) +
geom_point(data=location_data, aes(x=longitude, y=latitude, color= site), size = 5, alpha = 0.7) +
theme(panel.background = element_rect(fill = "aliceblue"),
panel.grid.major = element_line(colour = NA))
ggplot() +
geom_polygon(data = SK, aes(x=long, y = lat, group = group), fill=" grey37", alpha=0.3)
ggplot() +
geom_polygon(data = SK, aes(x=long, y = lat, group = group), fill=" grey37", alpha=0.3) +
theme(panel.background = element_rect(fill = "aliceblue"),
panel.grid.major = element_line(colour = NA))
sk
str(SK)
ggplot() +
geom_polygon(data = SK, aes(x=long, y = lat, group = group), fill=" grey37", alpha=0.3) +
geom_point(data=location_data, aes(x=longitude, y=latitude, color= site), size = 5, alpha = 0.7) +
theme(panel.background = element_rect(fill = "aliceblue"),
panel.grid.major = element_line(colour = NA))
install.packages("leaflet")
library(leaflet)
leaflet() %>%
addTiles() %>%
setView( lng = 2.34, lat = 48.85, zoom = 3 ) %>%
addProviderTiles("Esri.WorldImagery")
data(quakes)
head(quakes)
leaflet(data = location_data) %>% addTiles() %>%
addMarkers(~longitude, ~latitude, label = ~as.character(sites))
leaflet(data = location_data) %>% addTiles() %>%
addMarkers(~longitude, ~latitude, label = ~as.character(site))
leaflet(data = location_data) %>%
addTiles() %>%
setView( lng = 2.34, lat = 48.85, zoom = 3 ) %>%
addProviderTiles("Esri.WorldImagery") %>%
addMarkers(~longitude, ~latitude, label = ~as.character(site))
leaflet(data = location_data) %>% addTiles() %>%
addCircleMarkers(~longitude, ~latitude, label = ~as.character(site))
leaflet(data = location_data) %>% addProviderTiles(providers$Esri.NatGeoWorldMap) %>%
addCircleMarkers(~longitude, ~latitude, label = ~as.character(site))
leaflet(data = location_data) %>% addProviderTiles(providers$Esri.NatGeoWorldMap) %>%
addMarkers(~longitude, ~latitude, label = ~as.character(site))
leaflet(data = location_data) %>% addProviderTiles(providers$Esri.NatGeoWorldMap) %>%
addMarkers(~longitude, ~latitude, label = ~as.character(site))
leaflet(data = location_data) %>% addProviderTiles(providers$Esri.NatGeoWorldMap) %>%
addCircleMarkers(~longitude, ~latitude, label = ~as.character(site))
