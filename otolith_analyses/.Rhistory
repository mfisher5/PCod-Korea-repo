if (!require("devtools")) install.packages("devtools") # to install
devtools::install_github("thierrygosselin/assigner", build_vignettes = TRUE)  # to install WITH vignettes
assigner::install_gsi_sim(fromSource = TRUE) # to install gsi_sim from source
library(assigner)
##
library("devtools")
install_github("thierrygosselin/assigner") # to install
install.packages("adegent")
install.packages("adegenet")
install.packages("igraph")
install.packages("~/Downloads/igraph_1.1.2.tar.gz", repos = NULL, type = "source")
install.packages("~/Downloads/igraph_1.0.1.tar.gz", repos = NULL, type = "source")
install.package("NMF")
install.packages("NMF")
install.packages("~/Downloads/igraph_1.0.1.tar.gz", repos = NULL, type = "source")
install_github("thierrygosselin/assigner") # to install
library(assigner) # to load
# Install Packages --------------------------------------------------------
install.packages("ggplot2")
install.packages("zoo", type="source", repos="http://cran.stat.ucla.edu/")
library(zoo)
install.packages("MVN", dependencies=TRUE)
library(MVN)
library(ggplot2)
library(readr)
library(vegan)
setwd("/mnt/hgfs/PCod-Korea-repo/otolith_analyses")
PCod_Korea_Microchem_filtered <- read_delim("PCod_Korea_Microchem_filtered_bypop.txt","\t", escape_double = FALSE, trim_ws = TRUE)
odata <- PCod_Korea_Microchem_filtered
dim(odata)
View(odata)
## create new dataframe without sample IDs (just measurements)
odata_el <- odata[,2:17]
colnames(odata_el)
## MARDIA'S SKEWNESS AND KURTOSIS COEFFICIENTS
## requires MVN package
mardiaTest(odata_el, qqplot = TRUE)
unique(odata$SiteYear)
## Review: PERMANOVA
## -- The number of permutations possible is related to the number of sample units.
nperm <- 7!
## Review: PERMANOVA
## -- The number of permutations possible is related to the number of sample units.
nperm <- factorial(7); nperm
min_pval <- 1/factorial(7); min_pval
library(vegan)
## create new dataframe without sample IDs (just measurements)
odata_el <- odata[,2:17]
colnames(odata_el)
## new object of just sites / years
SamplingSite <- odata$SiteYear
# PERMANOVA on elements ---------------------------------------------------
Bcore <- adonis2(odata_el ~ SamplingSite,
permutations = 999, method = "Euclidean")
?adonis2
# PERMANOVA on elements ---------------------------------------------------
Bcore <- adonis2(odata_el ~ SamplingSite,
permutations = 999, method = "euclidean")
Bcore
## Log transform data?
odata_log <- decostand(x = odata_el, method = "log", MARGIN = "2")
odata_el <- odata[,2:17]
colnames(odata_el)
par(mfrow=c(2,4))
uniPlot(odata_el, type = "histogram")
par(mfrow=c(1,1))
## Log transform data?
odata_log <- log(odata)
## Log transform data?
odata_log <- log(odata_el)
View(odata_log)
par(mfrow=c(2,4))
uniPlot(odata_log, type = "histogram")
par(mfrow=c(1,1))
mardiaTest(odata_log, qqplot=TRUE)
par(mfrow=c(2,4))
uniPlot(odata_el, type = "histogram")
par(mfrow=c(1,1))
hapiro_pvals_core <- c(shapiro.test(odata_el$B11.c)$p.value,
shapiro.test(odata_el$B11.c)$p.value,
shapiro.test(odata_el$Li7.c)$p.value,
shapiro.test(odata_el$Mg24.c)$p.value,
shapiro.test(odata_el$Mn55.c)$p.value,
shapiro.test(odata_el$Pb208.c)$p.value,
shapiro.test(odata_el$Sr88.c)$p.value,
shapiro.test(odata_el$Zn66.c)$p.value)
qplot(shapiro_pvals_core, geom="histogram")
shapiro_pvals_core <- c(shapiro.test(odata_el$B11.c)$p.value,
shapiro.test(odata_el$B11.c)$p.value,
shapiro.test(odata_el$Li7.c)$p.value,
shapiro.test(odata_el$Mg24.c)$p.value,
shapiro.test(odata_el$Mn55.c)$p.value,
shapiro.test(odata_el$Pb208.c)$p.value,
shapiro.test(odata_el$Sr88.c)$p.value,
shapiro.test(odata_el$Zn66.c)$p.value)
qplot(shapiro_pvals_core, geom="histogram")
max(shapiro_pvals_core)
shapiro.test(odata_el$Mg24.c)$p.value
odata_log <- log(odata_el)
par(mfrow=c(2,4))
uniPlot(odata_log, type = "histogram")
par(mfrow=c(1,1))
plot(odata_log$B11.c, odata_el$B11.c)
qqnorm(odata_log$B11.c); qqline(odata_log$B11.c)
mardiaTest(odata_log, qqplot=TRUE)
## square root transform data?
odata_sqrt <- sqrt(odata_el)
uniPlot(odata_sqrt, type = "histogram")
mardiaTest(odata_sqrt, qqplot=TRUE)
par(mfrow=c(1,1))
mardiaTest(odata_sqrt, qqplot=TRUE)
odata_log10 <- log10(odata_el)
par(mfrow=c(2,4))
uniPlot(odata_log10, type = "histogram")
par(mfrow=c(1,1))
mardiaTest(odata_log10, qqplot=TRUE)
(rcompanion)
## Tukey transformation test
library(rcompanion)
## Tukey transformation test
install.packages("rcompanion")
library(rcompanion)
# Log transform data with vegan?
odata_log0 <- decostand(odata_el, method="log")
View(odata_el)
par(mfrow=c(2,4))
uniPlot(odata_log0, type = "histogram")
par(mfrow=c(1,1))
mardiaTest(odata_log0, qqplot=TRUE)
