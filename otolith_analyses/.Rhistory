print(head(Data.part))
print("Length of moving average data:")
print(length(Data.part[,2]))
# set min limit for plot by selecting the min of all data in columns 3:6 of data frame
min_lim=min(Data.part[,3:6],na.rm=TRUE)-0.02
# set max limit for plot by selecting the max of all data in columns 3:6 of data frame
max_lim=max(Data.part[,3:6],na.rm=TRUE)+0.1
# set max x axis for plot by finding the last marker position
max_x_lim = max(Data.part[,2])
# save locations of NAs in 3rd column of data frame ("Fst.Fct")
where.NA = which(is.na(Data.part[,3]))
# subset marker data based on chromosome you are looking at
marker_density_subset = subset(marker_density, chrom %in% ijk)
markers_per_window = marker_density_subset$num_markers
print(head(marker_density_subset))
print("length of marker density vector:")
print(length(markers_per_window))
# plot position of marker on chromosome v. "Fst.Fct" calculated in sla
## use min/max_lim above to define the y axis
plot(Data.part[,2], Data.part[,3],type="l",ylim=c(min_lim,max_lim), xlim=c(0,max_x_lim), lwd=3, col="red", ylab='',xlab='',cex.lab=1, cex.axis=1)
# add title, lines to plot
lines(Data.part[,2], Data.part[,5], col=rgb(0.193,0.205,0.205,0.25))
lines(Data.part[,2], Data.part[,6], col=rgb(0.193,0.205,0.205,0.25))
if(length(where.NA)!=0) polygon(c(Data.part[,2][-where.NA], rev(Data.part[,2][-where.NA])), c(Data.part[,5][-where.NA], rev(Data.part[,6][-where.NA])), col=rgb(0.193,0.205,0.205,0.25))
if(length(where.NA)==0) polygon(c(Data.part[,2], rev(Data.part[,2])), c(Data.part[,5], rev(Data.part[,6])), col=rgb(0.193,0.205,0.205,0.25))
abline(h=0)
mtext(paste(ijk),outer=TRUE,line=-2,cex=2,at=0.515)
mtext("Map Position (bp)",outer=TRUE,side=1,line=-2,cex=2,at=0.525)
mtext("Loci per Window",outer=TRUE, side=4,line=-2,cex=1,at=0.25)
mtext(expression(paste("F"[ST])),outer=TRUE,side=2,line=-2,cex=2,at=0.525)
# plot over the existing sliding window analysis:
par(new=TRUE)
# plot # markers per window (x axis stays the same) in dashed line (y=0 starts a bit higher for easier visualization)
plot(Data.part[,2],markers_per_window,ylim=c(-10,1.1*max(markers_per_window)),col="darkcyan",type='l',lty =2, lwd=2, axes = FALSE, ylab='',xlab='')
abline(h=0, lty=2, col="darkcyan")
# add tic marks on second y axis, with labels
axis(4,at=c(0,5,10,15,20,25,30,35,40,45,50),labels=TRUE,cex.axis=1,cex=1)
# add y axis label
mtext("Loci per Window",outer = TRUE, side=4,line=1,cex=1.5, at=0.525)
count = count + 1
}
}
markers_per_window_lg02 <- markers_per_window[151:300]
for (ijx in Num_chromosome){
Data.chrom = subset(marker_data, marker_data$chromosome==ijx)
Size_windows = 3*window_size  # sliding window is 3 times the value of sigma in each direction
Beg_position_cM=min(Data.chrom$position)+Size_windows  ## calculations cannot start at 0, because it would be biased no values between -6 and 0cM for example
End_position_cM=max(Data.chrom$position)-Size_windows
Beg_position = which(Data.chrom$position >=Beg_position_cM)[1] ### start at the first position as calculated before or at the first position where there is a data point (as sometimes, a large portion of the chromosome is made of duplicated loci --> not kept for population studies)
End_position = which(Data.chrom$position >= (max(End_position_cM)))[1]
Positions_LG=seq(from=Beg_position_cM,to=End_position_cM,length.out=divisions)  ## these position will be equidistant
Positions_all=c(Positions_all,Positions_LG)
markers_each_chrom=c()
for (x in 1:length(Positions_LG)){
MA_window = which(Data.chrom$position >= (Positions_LG[x]-Size_windows) & Data.chrom$position <= (Positions_LG[x]+Size_windows))
num_markers = length(MA_window)
#markers_each_chrom=c(markers_each_chrom,num_markers)
markers_per_window = c(markers_per_window,num_markers)
}
#plot(Positions_LG,markers_each_chrom,main=ijx)
#lines(Positions_LG,markers_each_chrom,type='l')
}
output=c()   ##be sure to clear output from previous runs
output=cbind(chromosomes_all,Positions_all,markers_per_window)
colnames(output)=c("chrom","position","num_markers")
View(output)
sla_output = read.table("batch_8_kernel_smoothing_1e+05_bootstraps_sigma_250000_div150.txt", header = TRUE, sep = "\t")
just_plot = function(data = sla_output, marker_density = markers_per_window, Nb_bootstrap=100000, which.chromosome.analysis="all", which.chromosome.plot="all",name="SLA_output")
{
# subset the data if not looking at all chromosomes; otherwise, load in all data
if(which.chromosome.analysis!="all") data = subset(data, subset=chromosome %in% which.chromosome.analysis)
if(which.chromosome.analysis=="all") data = data
# set number of chromosomes to the unique values of column chromosome in data (be sure to match column header!!)
Nb_chromosome = unique(data$chromosome)
# for each chromosome:
for (ijk in Nb_chromosome)
{
# subset full data frame to only include that chromosome and save as separate data frame
Data.part = subset(data, subset=chromosome %in% ijk)
print(head(Data.part))
# set min limit for plot by selecting the min of all data in columns 3:6 of data frame
min_lim=min(Data.part[,3:6],na.rm=TRUE)-0.02
# set max limit for plot by selecting the max of all data in columns 3:6 of data frame
max_lim=max(Data.part[,3:6],na.rm=TRUE)+0.1
# set max x axis for plot by finding the last marker position
max_x_lim = max(Data.part[,2])
# save locations of NAs in 3rd column of data frame ("Fst.Fct")
where.NA = which(is.na(Data.part[,3]))
# plot position of marker on chromosome v. "Fst.Fct" calculated in sla
## use min/max_lim above to define the y axis
plot(Data.part[,2], Data.part[,3],type="l",ylim=c(min_lim,max_lim), xlim=c(0,max_x_lim), lwd=3, col="red", ylab='',xlab='',cex.lab=1, cex.axis=1)
# add title, lines to plot
lines(Data.part[,2], Data.part[,5], col=rgb(0.193,0.205,0.205,0.25))
lines(Data.part[,2], Data.part[,6], col=rgb(0.193,0.205,0.205,0.25))
if(length(where.NA)!=0) polygon(c(Data.part[,2][-where.NA], rev(Data.part[,2][-where.NA])), c(Data.part[,5][-where.NA], rev(Data.part[,6][-where.NA])), col=rgb(0.193,0.205,0.205,0.25))
if(length(where.NA)==0) polygon(c(Data.part[,2], rev(Data.part[,2])), c(Data.part[,5], rev(Data.part[,6])), col=rgb(0.193,0.205,0.205,0.25))
abline(h=0)
mtext(paste(ijk),outer=TRUE,line=-2,cex=2,at=0.515)
mtext("Map Position (bp)",outer=TRUE,side=1,line=-2,cex=2,at=0.525)
mtext("Loci per Window",outer=TRUE, side=4,line=-2,cex=1,at=0.25)
mtext(expression(paste("F"[ST])),outer=TRUE,side=2,line=-2,cex=2,at=0.525)
# plot over the existing sliding window analysis:
par(new=TRUE)
# plot # markers per window (x axis stays the same) in dashed line (y=0 starts a bit higher for easier visualization)
plot(Data.part[,2],marker_density,ylim=c(-10,1.1*max(marker_density)),col="darkcyan",type='l',lty =2, lwd=2, axes = FALSE, ylab='',xlab='')
abline(h=0, lty=2, col="darkcyan")
# add tic marks on second y axis, with labels
axis(4,at=c(0,5,10,15,20,25,30,35,40,45,50),labels=TRUE,cex.axis=1,cex=1)
# add y axis label
mtext("Loci per Window",outer = TRUE, side=4,line=1,cex=1.5, at=0.525)
}
}
## check calculated number markers per window for first window of chromosomes 1 - 3
##-- input names of first three chromosomes here
chr1 <- "LG01"
chr2 <- "LG02"
chr3 <- "LG03"
sigma <- window_size
##-- set full window size
full_window = sigma*6; full_window
##-- first chromosome
markers_in_window <- markers_per_window[1]
marker_data_chr1 <- marker_data[marker_data$chromosome == chr1,]
end_window <- marker_data_chr1$position[1] + full_window
counted_markers_in_window <- nrow(marker_data_chr1[marker_data_chr1$position < end_window,])
if(markers_in_window == counted_markers_in_window){
print("FUNCTION VERIFIED")
} else{
print("ERROR:")
print(markers_in_window)
print(counted_markers_in_window)
}
##-- second chromosome
markers_in_window <- markers_per_window[151]
marker_data_chr2 <- marker_data[marker_data$chromosome == chr2,]
end_window <- marker_data_chr2$position[1] + full_window
counted_markers_in_window <- nrow(marker_data_chr2[marker_data_chr2$position < end_window,])
if(markers_in_window == counted_markers_in_window){
print("FUNCTION VERIFIED")
} else{
print("ERROR")
print(markers_in_window)
print(counted_markers_in_window)
}
##-- third chromosome
markers_in_window <- markers_per_window[301]
marker_data_chr3 <- marker_data[marker_data$chromosome == chr3,]
end_window <- marker_data_chr3$position[1] + full_window
counted_markers_in_window <- nrow(marker_data_chr3[marker_data_chr3$position < end_window,])
if(markers_in_window == counted_markers_in_window){
print("FUNCTION VERIFIED")
} else{
print("ERROR")
print(markers_in_window)
print(counted_markers_in_window)
}
markers_per_window_lg01 <- markers_per_window[1:150]
just_plot(data = sla_output, marker_density = markers_per_window, Nb_bootstrap=100000, which.chromosome.analysis="all", which.chromosome.plot="all",name="SLA_output_testing")
markers_per_window_lg01 <- markers_per_window[1:150]
markers_per_window_lg01 <- markers_per_window[1:150]
just_plot(data = sla_output, marker_density = markers_per_window_lg01, Nb_bootstrap=100000, which.chromosome.analysis="LG01", which.chromosome.plot="LG01",name="SLA_output_testing")
setwd("D:/Pacific cod/DataAnalysis/PCod-Korea-repo/otolith_analyses")
# Load data ---------------------------------------------------------------
odata <- read.csv("data/PCod_Korea_Microchem_filtered.txt", header=TRUE, sep="\t")
odata_ex <- read.csv("data/PCod_Korea_ExpData_filtered.txt", header=TRUE, sep="\t")
dim(odata)
dim(odata_ex)
remove.packages("dplyr")
install.packages("dplyr")
library(dply)
library(dplyr)
install.packages("dply")
install.packages("dplyr")
setwd("~/SEFS_502")
# Load data ---------------------------------------------------------------
odata <- read.csv("data/PCod_Korea_Microchem_filtered_edit.txt", header=TRUE, sep="\t")
odata_ex <- read.csv("data/PCod_Korea_ExpData_filtered.txt", header=TRUE, sep="\t")
dim(odata)
dim(odata_ex)
setwd("D:/Pacific cod/DataAnalysis/PCod-Korea-repo/otolith_analyses")
odata <- read.csv("data/PCod_Korea_Microchem_filtered_edit.txt", header=TRUE, sep="\t")
odata_ex <- read.csv("data/PCod_Korea_ExpData_filtered.txt", header=TRUE, sep="\t")
dim(odata)
dim(odata_ex)
install.packages("vegan"); library(vegan)
install.packages("dplyr"); library(dplyr)
odata_combo <- full_join(x=odata,y=odata_ex,by="Sample")
head(odata_combo)
odata_edge <- odata[,10:17]
head(odata_edge)
odata_core <- odata[,2:9]
odata_el <- odata_combo[,2:17]
head(odata_el)
CV <- function(x){100*sd(x) / mean(x)}
CV(colSums(odata_el)) #CV = 274.4344
odata_el.mrel <- decostand(odata_el, method="max")
head(odata_el.mrel)
odata_edge <- odata_el.mrel[,9:16]
head(odata_edge)
odata_core <- odata_el.mrel[,1:8]
head(odata_core)
odata_combo <- mutate(odata_combo, SiteYear=paste(Sampling.Site,Year,sep="_")) # add column with site & year
site_year <- odata_combo$SiteYear # create vector of new column
odata_siteyear.res <- adonis2(odata_edge ~ site_year,
permutations = 99999, method = "euc")
odata_siteyear.res #1e-05 ***
edge_bysite <- cbind(odata_edge, odata_combo$SiteYear)
head(edge_bysite)
aov(SiteYear ~ B11.e, data = edge_bysite)
edge_bysite <- cbind(odata_edge, SiteYear = odata_combo$SiteYear)
head(edge_bysite)
aov(SiteYear ~ B11.e, data = edge_bysite)
aov(B11.e ~ SiteYear, data = edge_bysite)
install.packages("MVN", dependencies=TRUE)
library(MVN)
mvn(odata_el, mvnTest="mardia", univariateTest="SW",multivariatePlot = "qq", univariatePlot = "histogram")
aov(Sr88.e ~ SiteYear, data = edge_bysite)
anova <- aov(Sr88.e ~ SiteYear, data = edge_bysite)
summary(anova)
odata_el_mat <- as.matrix(odata_el)
odata_ln <- apply(odata_el_mat, 2, "log")
mvn(odata_ln, mvnTest="mardia", univariateTest="SW",multivariatePlot = "qq", univariatePlot = "histogram")
Ba.ln <- log(edge_bysite$Ba138.e)
anova <- aov(Ba.ln ~ SiteYear, data = edge_bysite)
summary(anova)
Mg.ln <- log(edge_bysite$Mg24.e)
anova <- aov(Mg.ln ~ SiteYear, data = edge_bysite)
summary(anova)
Zn.ln <- log(edge_bysite$Zn66.e)
anova <- aov(Zn.ln ~ SiteYear, data = edge_bysite)
summary(anova)
odata_log <- apply(odata_el_mat, 2, "log10")
mvn(odata_log, mvnTest="mardia", univariateTest="SW",multivariatePlot = "qq", univariatePlot = "histogram")
odata_sr <- apply(odata_el_mat, 2, "sqrt")
mvn(odata_sr, mvnTest="mardia", univariateTest="SW",multivariatePlot = "qq", univariatePlot = "histogram")
odata_cr <- apply(odata_el_mat, 2, "^(1/3")
odata_cr <- apply(odata_el_mat, 2, "^(1/3)")
install.packages("kader")
cuberoot <- function(x){x^(1/3)}
odata_cr <- apply(odata_el_mat, 2, "cuberoot")
mvn(odata_cr, mvnTest="mardia", univariateTest="SW",multivariatePlot = "qq", univariatePlot = "histogram")
boxplot(odata_el.mrel$B11.e, main = "B11.e")
boxplot(odata_el.mrel$Ba138.e, main = "Ba138.e")
boxplot(odata_el.mrel$Li7.e, main = "Li7.e")
boxplot(odata_el.mrel$Mg24.e, main = "Mg24.e")
boxplot(odata_el.mrel$Mn55.e, main = "Mn55.e")
boxplot(odata_el.mrel$Pb208.e, main = "Pb208.e")
boxplot(odata_el.mrel$Sr88.e, main = "Sr88.e")
boxplot(odata_el.mrel$Zn66.e, main = "Zn66.e")
par(mfrow=c(2,4))
boxplot(odata_el.mrel$B11.e, main = "B11.e")
boxplot(odata_el.mrel$Ba138.e, main = "Ba138.e")
boxplot(odata_el.mrel$Li7.e, main = "Li7.e")
boxplot(odata_el.mrel$Mg24.e, main = "Mg24.e")
boxplot(odata_el.mrel$Mn55.e, main = "Mn55.e")
boxplot(odata_el.mrel$Pb208.e, main = "Pb208.e")
boxplot(odata_el.mrel$Sr88.e, main = "Sr88.e")
boxplot(odata_el.mrel$Zn66.e, main = "Zn66.e")
edge.mrel_dist <- dist(odata_edge.mrel, method = "euclidean")
View(odata_edge.mrel)
odata_edge.mrel <- odata_el.mrel[,9:16]
head(odata_edge)
odata_core.mrel <- odata_el.mrel[,1:8]
head(odata_core)
edge.mrel_dist <- dist(odata_edge.mrel, method = "euclidean")
View(odata_edge.mrel)
unique(odata_combo$SiteYear)
ks <- c(1,2,3,4,5,6,7)
stresses <- c()
for(k in ks){
odata_edge.nmds <- metaMDS(comm = edge.mrel_dist, autotransform = FALSE,
distance = "euc", engine = "monoMDS", k = k, weakties = TRUE,
model = "global", maxit = 400, try = 40, trymax = 200,
wascores = TRUE)
stresses[k] <- odata_edge.nmds$stress
}
plot(ks,stresses, xlab="K", ylab="stress", main="Value of K v. Stress of NMDS")
par(mfrow=c(1,1))
plot(ks,stresses, xlab="K", ylab="stress", main="Value of K v. Stress of NMDS")
odata_edge.nmds7 <- metaMDS(comm = edge.mrel_dist, autotransform = FALSE,
distance = "euc", engine = "monoMDS", k = 7, weakties = TRUE,
model = "global", maxit = 400, try = 40, trymax = 200,
wascores = TRUE)
odata_edge.nmds7
stressplot(object=odata_edge.nmds7, lwd=2)
plot(odata_edge.nmds7, xaxt = "n", yaxt = "n", xlab = "", ylab = "", main = "NMDS\nMicrochemistry from Otolith Edge")
## set colors for points based on sampling site
points(odata_edge.nmds7$points[odata_combo$SiteYear == "Pohang_2015",],
pch = 19, col = "#b3de69", cex = 1.2)
points(odata_edge.nmds7$points[odata_combo$SiteYear == "Geoje_2015",],
pch = 19, col = "gold2", cex = 1.2)
points(odata_edge.nmds7$points[odata_combo$SiteYear == "Namhae_2015",],
pch = 19, col = "#bebada", cex = 1.2)
points(odata_edge.nmds7$points[odata_combo$SiteYear == "YSBlock_2016",],
pch = 19, col = "#fb8072", cex = 1.2)
points(odata_edge.nmds7$points[odata_combo$SiteYear == "JinhaeBay_2007",],
pch = 19, col = "#8dd3c7", cex = 1.2)
points(odata_edge.nmds7$points[odata_combo$SiteYear == "JinhaeBay_2008",],
pch = 19, col = "#80b1d3", cex = 1.2)
points(odata_edge.nmds7$points[odata_combo$SiteYear == "Geoje_2014",],
pch = 19, col = "darkorange", cex = 1.2)
## add legend
legend(x="topright", pch = 19, bty="n", cex = 1, pt.cex = 1.2,
col = c("#fb8072", "#bebada", "darkorange", "gold2", "#8dd3c7", "#80b1d3", "#b3de69"),
legend = c("YSBlock '16", "Namhae '15", "Geoje '14", "Geoje '15", "JinhaeBay '07e", "JinhaeBay '07l", "Pohang '15"), title = "Sampling Site")
# Add ellipses etc. -------------------------------------------------------
ordiellipse(odata_edge.nmds7, odata_combo$SiteYear, col=c("darkorange", "gold2", "#8dd3c7", "#80b1d3", "#bebada", "#b3de69", "#fb8072"), kind = "sd", lty = 2, lwd = 1.5)
# Add Element Vectors -----------------------------------------------------
## fit elements to nmds
elements.fit <- envfit(odata_edge.nmds7 ~ B11.e + Ba138.e + Li7.e + Mg24.e + Mn55.e + Pb208.e + Sr88.e + Zn66.e, data = odata_combo)
## plot element vectors
plot(elements.fit, col = "black")
combo_nojb <- subset(odata_combo, Sampling.Site != "JinhaeBay")
## subset just response matrix
edge_elements <- colnames(odata_edge)
edge_nojb <- select(combo_nojb, edge_elements); View(edge_nojb)
dim(edge_nojb)
# relativize data ---------------------------------------------------------
edge_nojb.mrel <- decostand(edge_nojb, method="max")
# NMDS k = 1 through 5 ----------------------------------------------------
## create distance matrix
edge_nojb_dist <- dist(edge_nojb.mrel, method = "euclidean")
## how many unique site / year combos?
unique(combo_nojb$SiteYear)
ks <- c(1,2,3,4,5)
## run nmds for k = 1 through 7 and save stress values
stresses <- c()
for(k in ks){
odata_edge.nmds <- metaMDS(comm = edge_nojb_dist, autotransform = FALSE,
distance = "euc", engine = "monoMDS", k = k, weakties = TRUE,
model = "global", maxit = 400, try = 40, trymax = 200,
wascores = TRUE)
stresses[k] <- odata_edge.nmds$stress
}
plot(ks,stresses, xlab="K", ylab="stress", main="Value of K v. Stress of NMDS")
odata_edge_nojb.nmds5 <- metaMDS(comm = edge_nojb_dist, autotransform = FALSE,
distance = "euc", engine = "monoMDS", k = 5, weakties = TRUE,
model = "global", maxit = 400, try = 40, trymax = 200,
wascores = TRUE)
odata_edge_nojb.nmds5
stressplot(object=odata_edge_nojb.nmds5, lwd=2)
plot(odata_edge_nojb.nmds5, xaxt = "n", yaxt = "n", xlab = "", ylab = "", main = "NMDS without Jinhae Bay\nMicrochemistry from Otolith Edge")
## set colors for points based on sampling site
points(odata_edge_nojb.nmds5$points[combo_nojb$SiteYear == "Pohang_2015",],
pch = 19, col = "#b3de69", cex = 1.2)
points(odata_edge_nojb.nmds5$points[combo_nojb$SiteYear == "Geoje_2015",],
pch = 19, col = "gold2", cex = 1.2)
points(odata_edge_nojb.nmds5$points[combo_nojb$SiteYear == "Namhae_2015",],
pch = 19, col = "#bebada", cex = 1.2)
points(odata_edge_nojb.nmds5$points[combo_nojb$SiteYear == "YSBlock_2016",],
pch = 19, col = "#fb8072", cex = 1.2)
points(odata_edge_nojb.nmds5$points[combo_nojb$SiteYear == "Geoje_2014",],
pch = 19, col = "darkorange", cex = 1.2)
## add legend
legend(x="topleft", pch = 19, bty="n", cex = 1, pt.cex = 1.2,
col = c("#fb8072", "#bebada", "darkorange", "gold2", "#b3de69"),
legend = c("YSBlock '16", "Namhae '15", "Geoje '14", "Geoje '15", "Pohang '15"), title = "Sampling Site")
# Add ellipses etc. -------------------------------------------------------
ordiellipse(odata_edge_nojb.nmds5, combo_nojb$SiteYear, col=c("darkorange", "gold2", "#bebada", "#b3de69", "#fb8072"), kind = "sd", lty = 2, lwd = 1.5)
# Add Element Vectors -----------------------------------------------------
## fit elements to nmds
elements.fit <- envfit(odata_edge_nojb.nmds5 ~ B11.e + Ba138.e + Li7.e + Mg24.e + Mn55.e + Pb208.e + Sr88.e + Zn66.e, data = combo)
## plot element vectors
plot(elements.fit, col = "black")
plot(odata_edge_nojb.nmds5, xaxt = "n", yaxt = "n", xlab = "", ylab = "", main = "NMDS without Jinhae Bay\nMicrochemistry from Otolith Edge")
## set colors for points based on sampling site
points(odata_edge_nojb.nmds5$points[combo_nojb$SiteYear == "Pohang_2015",],
pch = 19, col = "#b3de69", cex = 1.2)
points(odata_edge_nojb.nmds5$points[combo_nojb$SiteYear == "Geoje_2015",],
pch = 19, col = "gold2", cex = 1.2)
points(odata_edge_nojb.nmds5$points[combo_nojb$SiteYear == "Namhae_2015",],
pch = 19, col = "#bebada", cex = 1.2)
points(odata_edge_nojb.nmds5$points[combo_nojb$SiteYear == "YSBlock_2016",],
pch = 19, col = "#fb8072", cex = 1.2)
points(odata_edge_nojb.nmds5$points[combo_nojb$SiteYear == "Geoje_2014",],
pch = 19, col = "darkorange", cex = 1.2)
## add legend
legend(x="topleft", pch = 19, bty="n", cex = 1, pt.cex = 1.2,
col = c("#fb8072", "#bebada", "darkorange", "gold2", "#b3de69"),
legend = c("YSBlock '16", "Namhae '15", "Geoje '14", "Geoje '15", "Pohang '15"), title = "Sampling Site")
# Add ellipses etc. -------------------------------------------------------
ordiellipse(odata_edge_nojb.nmds5, combo_nojb$SiteYear, col=c("darkorange", "gold2", "#bebada", "#b3de69", "#fb8072"), kind = "sd", lty = 2, lwd = 1.5)
# Add Element Vectors -----------------------------------------------------
## fit elements to nmds
elements.fit.k5 <- envfit(odata_edge_nojb.nmds5 ~ B11.e + Ba138.e + Li7.e + Mg24.e + Mn55.e + Pb208.e + Sr88.e + Zn66.e, data = odata_combo)
## plot element vectors
plot(elements.fit.k5, col = "black")
elements.fit.k5 <- envfit(odata_edge_nojb.nmds5 ~ B11.e + Ba138.e + Li7.e + Mg24.e + Mn55.e + Pb208.e + Sr88.e + Zn66.e, data = combo_nojb)
plot(odata_edge_nojb.nmds5, xaxt = "n", yaxt = "n", xlab = "", ylab = "", main = "NMDS without Jinhae Bay\nMicrochemistry from Otolith Edge")
## set colors for points based on sampling site
points(odata_edge_nojb.nmds5$points[combo_nojb$SiteYear == "Pohang_2015",],
pch = 19, col = "#b3de69", cex = 1.2)
points(odata_edge_nojb.nmds5$points[combo_nojb$SiteYear == "Geoje_2015",],
pch = 19, col = "gold2", cex = 1.2)
points(odata_edge_nojb.nmds5$points[combo_nojb$SiteYear == "Namhae_2015",],
pch = 19, col = "#bebada", cex = 1.2)
points(odata_edge_nojb.nmds5$points[combo_nojb$SiteYear == "YSBlock_2016",],
pch = 19, col = "#fb8072", cex = 1.2)
points(odata_edge_nojb.nmds5$points[combo_nojb$SiteYear == "Geoje_2014",],
pch = 19, col = "darkorange", cex = 1.2)
## add legend
legend(x="topleft", pch = 19, bty="n", cex = 1, pt.cex = 1.2,
col = c("#fb8072", "#bebada", "darkorange", "gold2", "#b3de69"),
legend = c("YSBlock '16", "Namhae '15", "Geoje '14", "Geoje '15", "Pohang '15"), title = "Sampling Site")
# Add ellipses etc. -------------------------------------------------------
ordiellipse(odata_edge_nojb.nmds5, combo_nojb$SiteYear, col=c("darkorange", "gold2", "#bebada", "#b3de69", "#fb8072"), kind = "sd", lty = 2, lwd = 1.5)
# Add Element Vectors -----------------------------------------------------
## fit elements to nmds
elements.fit.k5 <- envfit(odata_edge_nojb.nmds5 ~ B11.e + Ba138.e + Li7.e + Mg24.e + Mn55.e + Pb208.e + Sr88.e + Zn66.e, data = combo_nojb)
## plot element vectors
plot(elements.fit.k5, col = "black")
edge.mrel_dist <- dist(odata_edge.mrel, method = "euclidean")
core.mrel_dist <- dist(odata_core.mrel, method = "euclidean")
odata_mantel <- mantel(xdis = edge.mrel_dist, ydis = core.mrel_dist,
method = "pearson", permutations = 99999)
odata_mantel
edge.mrel_dist <- dist(odata_edge.mrel, method = "euclidean")
core.mrel_dist <- dist(odata_core.mrel, method = "euclidean")
edge.hclust <- hclust(d = edge.mrel_dist, method = "ward.D2")
core.hclust <- hclust(d = core.mrel_dist, method = "ward.D2")
plot(core.hclust, hang = -1, main = "Core Microchemistry\nCluster Dendrogram",
ylab = "Dissimilarity", xlab = "Coded by Site",
sub = "Euclidean dissimilarity; ward.D2 linkage",
labels = odata_combo$SiteYear)
core_heights <- cbind(core.hclust$height, core.hclust$merge)
colnames(core_heights) <- c("Height", "JoinThis", "WithThis")
plot(x=16:1, y=core_heights[(nrow(core_heights) - 15):nrow(core_heights),1],
xlab="Number of groups", ylab="Height", type="b", main="Core")
OtoCluster <- function(edist = edge.mrel_dist, cdist = core.mrel_dist, method = "ward.D2"){
## conduct cluster analysis
edge.hclust <- hclust(d = edist, method = method)
core.hclust <- hclust(d = cdist, method = method)
## plot dendrogram
plot(edge.hclust, hang = -1, main = "Edge Microchemistry\nCluster Dendrogram",
ylab = "Dissimilarity", xlab = "Coded by Site",
sub = paste("Euclidean dissimilarity;", method, sep=" "),
labels = odata_combo$SiteYear)
plot(core.hclust, hang = -1, main = "Core Microchemistry\nCluster Dendrogram",
ylab = "Dissimilarity", xlab = "Coded by Site",
sub = paste("Euclidean dissimilarity;", method, sep=" "),
labels = odata_combo$SiteYear)
## how many groups?
edge_heights <- cbind(edge.hclust$height, edge.hclust$merge)
colnames(edge_heights) <- c("Height", "JoinThis", "WithThis")
plot(x=16:1, y=edge_heights[(nrow(edge_heights) - 15):nrow(edge_heights),1],
xlab="Number of groups", ylab="Height", type="b", main="Edge")
core_heights <- cbind(core.hclust$height, core.hclust$merge)
colnames(core_heights) <- c("Height", "JoinThis", "WithThis")
plot(x=16:1, y=core_heights[(nrow(core_heights) - 15):nrow(core_heights),1],
xlab="Number of groups", ylab="Height", type="b", main="Core")
}
OtoCluster(edist = edge.mrel_dist, cdist = core.mrel_dist, method = "ward.D2")
edge.hclust <- hclust(d = edge.mrel_dist, method = "ward.D2")
core.hclust <- hclust(d = core.mrel_dist, method = "ward.D2")
install.packages("pvclust")
library(pvclust)
pvclust(odata_edge.mrel, method.hclust="ward.D2",
method.dist="euclidean", use.cor="pairwise.complete.obs",
nboot = 1000, parallel=TRUE, iseed=201)
edge.wd2 <- pvclust(odata_edge.mrel, method.hclust="ward.D2",
method.dist="euclidean", use.cor="pairwise.complete.obs",
nboot = 1000, parallel=TRUE, iseed=201)
plot(edge.wd2)
odata_edge.mrel
edge_mrel_transposed <- t(odata_edge.mrel)
View(edge_mrel_transposed)
colnames(edge_mrel_transposed) <- odata_combo$Sample
View(edge_mrel_transposed)
edge.wd2 <- pvclust(edge_mrel_transposed, method.hclust="ward.D2",
method.dist="euclidean", use.cor="pairwise.complete.obs",
nboot = 1000, parallel=TRUE, iseed=201)
plot(edge.wd2)
edge.wd2
dim(edge_mrel_transposed)
edge.wd2 <- pvclust(edge_mrel_transposed, method.hclust="ward.D2",
method.dist="euclidean", nboot = 100)
warnings()
colnames(edge_mrel_transposed) <- odata_combo$SiteYear
edge.wd2 <- pvclust(edge_mrel_transposed, method.hclust="ward.D2",
method.dist="euclidean", nboot = 100)
edge.wd2 <- pvclust(edge_mrel_transposed, method.hclust="ward.D2", r=seq(0.5,1,by=0.1)
method.dist="euclidean", nboot = 100)
edge.wd2 <- pvclust(edge_mrel_transposed, method.hclust="ward.D2", r=seq(0.5,1,by=0.1),
method.dist="euclidean", nboot = 100)
plot(edge.wd2)
summary(edge.wd2)
print.pvclust(edge.wd2)
library(pvclust)
print.pvclust(edge.wd2)
plot.pvclust(edge.wd2)
print(edge.wd2)
pvpick(edge.wd2, alpha = 0.95, pv="au")
colnames(edge_mrel_transposed) <- odata_combo$Sample
edge.wd2 <- pvclust(edge_mrel_transposed, method.hclust="ward.D2", r=seq(0.5,1,by=0.1),
method.dist="euclidean", nboot = 100)
plot(edge.wd2)
pvpick(edge.wd2, alpha = 0.95, pv="au")
pvrect(edge.wd2, alpha = 0.95, pv="au")
core_mrel_transposed <- t(core_edge.mrel)
core_mrel_transposed <- t(odata_core.mrel)
dim(core_mrel_transposed)
colnames(core_mrel_transposed) <- odata_combo$Sample
edge.wd2 <- pvclust(core_mrel_transposed, method.hclust="ward.D2", r=seq(0.5,1,by=0.1),
method.dist="euclidean", nboot = 100)
plot(edge.wd2)
pvrect(edge.wd2, alpha = 0.95, pv="au")
core.wd2 <- pvclust(core_mrel_transposed, method.hclust="ward.D2", r=seq(0.5,12,by=0.05), method.dist="euclidean", nboot = 100)
core.wd2 <- pvclust(core_mrel_transposed, method.hclust="ward.D2", r=seq(0.5,1,by=0.05), method.dist="euclidean", nboot = 100)
core.wd2 <- pvclust(core_mrel_transposed, method.hclust="ward.D2", r=seq(0.5,1,by=0.1), method.dist="euclidean", nboot = 100)
plot(core.wd2)
pvrect(core.wd2, alpha = 0.95, pv="au")
plot(edge.wd2)
